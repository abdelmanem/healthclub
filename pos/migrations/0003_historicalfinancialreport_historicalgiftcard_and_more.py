# Generated by Django 5.2.6 on 2025-10-10 20:04

import django.core.validators
import django.db.models.deletion
import simple_history.models
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('guests', '0010_guest_country_historicalguest_country'),
        ('pos', '0002_historicalpayment_gateway_response_and_more'),
        ('reservations', '0014_historicalreservation_is_first_for_guest_and_more'),
        ('services', '0006_auto_20250913_0032'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricalFinancialReport',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('report_type', models.CharField(choices=[('revenue', 'Revenue Report'), ('profit_loss', 'Profit & Loss'), ('tax_summary', 'Tax Summary'), ('payment_summary', 'Payment Summary'), ('custom', 'Custom Report')], max_length=20)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('generated_at', models.DateTimeField(blank=True, editable=False)),
                ('data', models.JSONField(default=dict, help_text='Report data in JSON format')),
                ('file_path', models.CharField(blank=True, help_text='Path to generated report file', max_length=500)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical financial report',
                'verbose_name_plural': 'historical financial reports',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalGiftCard',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('code', models.CharField(db_index=True, max_length=50)),
                ('original_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('remaining_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(choices=[('active', 'Active'), ('used', 'Used'), ('expired', 'Expired'), ('cancelled', 'Cancelled')], default='active', max_length=20)),
                ('issued_date', models.DateTimeField(blank=True, editable=False)),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical gift card',
                'verbose_name_plural': 'historical gift cards',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPaymentMethod',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(help_text="Display name for this payment method (e.g., 'Credit Card')", max_length=50)),
                ('code', models.CharField(db_index=True, help_text="Internal code (e.g., 'credit_card'). Used in API calls.", max_length=20)),
                ('is_active', models.BooleanField(default=True, help_text="If unchecked, this method won't appear in payment options")),
                ('requires_reference', models.BooleanField(default=False, help_text='If checked, staff must enter a transaction/reference number')),
                ('icon', models.CharField(blank=True, help_text="Emoji or CSS icon class (e.g., 'ðŸ’³' or 'fas fa-credit-card')", max_length=50)),
                ('display_order', models.IntegerField(default=0, help_text='Sort order (lower numbers appear first)')),
                ('description', models.TextField(blank=True, help_text='Internal notes about this payment method')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Payment Method',
                'verbose_name_plural': 'historical Payment Methods',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPromotionalCode',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('code', models.CharField(db_index=True, max_length=50)),
                ('description', models.CharField(max_length=200)),
                ('code_type', models.CharField(choices=[('percentage', 'Percentage'), ('fixed_amount', 'Fixed Amount'), ('free_service', 'Free Service')], max_length=20)),
                ('discount_value', models.DecimalField(decimal_places=2, help_text='Discount amount or percentage', max_digits=10)),
                ('min_purchase_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('max_discount_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('usage_limit', models.PositiveIntegerField(blank=True, help_text='Maximum number of uses', null=True)),
                ('used_count', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('valid_from', models.DateTimeField()),
                ('valid_until', models.DateTimeField()),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical promotional code',
                'verbose_name_plural': 'historical promotional codes',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalRefund',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('reason', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('processed', 'Processed'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical refund',
                'verbose_name_plural': 'historical refunds',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Display name for this payment method (e.g., 'Credit Card')", max_length=50)),
                ('code', models.CharField(help_text="Internal code (e.g., 'credit_card'). Used in API calls.", max_length=20, unique=True)),
                ('is_active', models.BooleanField(default=True, help_text="If unchecked, this method won't appear in payment options")),
                ('requires_reference', models.BooleanField(default=False, help_text='If checked, staff must enter a transaction/reference number')),
                ('icon', models.CharField(blank=True, help_text="Emoji or CSS icon class (e.g., 'ðŸ’³' or 'fas fa-credit-card')", max_length=50)),
                ('display_order', models.IntegerField(default=0, help_text='Sort order (lower numbers appear first)')),
                ('description', models.TextField(blank=True, help_text='Internal notes about this payment method')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Payment Method',
                'verbose_name_plural': 'Payment Methods',
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.AlterModelOptions(
            name='historicalinvoice',
            options={'get_latest_by': ('history_date', 'history_id'), 'ordering': ('-history_date', '-history_id'), 'verbose_name': 'historical Invoice', 'verbose_name_plural': 'historical Invoices'},
        ),
        migrations.AlterModelOptions(
            name='historicalpayment',
            options={'get_latest_by': ('history_date', 'history_id'), 'ordering': ('-history_date', '-history_id'), 'verbose_name': 'historical Payment', 'verbose_name_plural': 'historical Payments'},
        ),
        migrations.AlterModelOptions(
            name='invoice',
            options={'ordering': ['-date'], 'verbose_name': 'Invoice', 'verbose_name_plural': 'Invoices'},
        ),
        migrations.AlterModelOptions(
            name='invoiceitem',
            options={'ordering': ['id'], 'verbose_name': 'Invoice item', 'verbose_name_plural': 'Invoice items'},
        ),
        migrations.AlterModelOptions(
            name='payment',
            options={'ordering': ['-payment_date'], 'verbose_name': 'Payment', 'verbose_name_plural': 'Payments'},
        ),
        migrations.AddField(
            model_name='historicalinvoice',
            name='amount_paid',
            field=models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total amount paid so far', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))]),
        ),
        migrations.AddField(
            model_name='historicalinvoice',
            name='balance_due',
            field=models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Remaining balance: (total - amount_paid)', max_digits=12),
        ),
        migrations.AddField(
            model_name='historicalinvoice',
            name='created_at',
            field=models.DateTimeField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='historicalinvoice',
            name='created_by',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='Staff member who created this invoice', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalinvoice',
            name='due_date',
            field=models.DateField(blank=True, help_text='Payment due by this date', null=True),
        ),
        migrations.AddField(
            model_name='historicalinvoice',
            name='paid_date',
            field=models.DateTimeField(blank=True, help_text='When invoice was fully paid', null=True),
        ),
        migrations.AddField(
            model_name='historicalinvoice',
            name='service_charge',
            field=models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Service charge amount', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))]),
        ),
        migrations.AddField(
            model_name='historicalinvoice',
            name='subtotal',
            field=models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Sum of all line items before tax and discount', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))]),
        ),
        migrations.AddField(
            model_name='historicalinvoice',
            name='updated_at',
            field=models.DateTimeField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='historicalinvoiceitem',
            name='notes',
            field=models.TextField(blank=True, help_text='Line item notes'),
        ),
        migrations.AddField(
            model_name='historicalpayment',
            name='created_at',
            field=models.DateTimeField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='historicalpayment',
            name='payment_type',
            field=models.CharField(choices=[('full', 'Full Payment'), ('partial', 'Partial Payment'), ('deposit', 'Deposit'), ('refund', 'Refund')], default='full', help_text='Type of payment', max_length=20),
        ),
        migrations.AddField(
            model_name='historicalpayment',
            name='processed_by',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='Staff member who processed this payment', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalpayment',
            name='updated_at',
            field=models.DateTimeField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='invoice',
            name='amount_paid',
            field=models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total amount paid so far', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))]),
        ),
        migrations.AddField(
            model_name='invoice',
            name='balance_due',
            field=models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Remaining balance: (total - amount_paid)', max_digits=12),
        ),
        migrations.AddField(
            model_name='invoice',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.AddField(
            model_name='invoice',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='Staff member who created this invoice', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_invoices', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='invoice',
            name='due_date',
            field=models.DateField(blank=True, help_text='Payment due by this date', null=True),
        ),
        migrations.AddField(
            model_name='invoice',
            name='paid_date',
            field=models.DateTimeField(blank=True, help_text='When invoice was fully paid', null=True),
        ),
        migrations.AddField(
            model_name='invoice',
            name='service_charge',
            field=models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Service charge amount', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))]),
        ),
        migrations.AddField(
            model_name='invoice',
            name='subtotal',
            field=models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Sum of all line items before tax and discount', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))]),
        ),
        migrations.AddField(
            model_name='invoice',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, null=True),
        ),
        migrations.AddField(
            model_name='invoiceitem',
            name='notes',
            field=models.TextField(blank=True, help_text='Line item notes'),
        ),
        migrations.AddField(
            model_name='payment',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.AddField(
            model_name='payment',
            name='payment_type',
            field=models.CharField(choices=[('full', 'Full Payment'), ('partial', 'Partial Payment'), ('deposit', 'Deposit'), ('refund', 'Refund')], default='full', help_text='Type of payment', max_length=20),
        ),
        migrations.AddField(
            model_name='payment',
            name='processed_by',
            field=models.ForeignKey(blank=True, help_text='Staff member who processed this payment', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='payment',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, null=True),
        ),
        migrations.AlterField(
            model_name='historicalinvoice',
            name='date',
            field=models.DateTimeField(blank=True, editable=False, help_text='When invoice was created'),
        ),
        migrations.AlterField(
            model_name='historicalinvoice',
            name='discount',
            field=models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Discount amount (promotional, membership, etc.)', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))]),
        ),
        migrations.AlterField(
            model_name='historicalinvoice',
            name='guest',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='The guest being billed', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='guests.guest'),
        ),
        migrations.AlterField(
            model_name='historicalinvoice',
            name='invoice_number',
            field=models.CharField(blank=True, db_index=True, help_text='Auto-generated unique invoice number (e.g., INV-1-20251010)', max_length=50),
        ),
        migrations.AlterField(
            model_name='historicalinvoice',
            name='notes',
            field=models.TextField(blank=True, help_text='Internal notes (guest requests, special circumstances, etc.)'),
        ),
        migrations.AlterField(
            model_name='historicalinvoice',
            name='reservation',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='Related reservation (if any)', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='reservations.reservation'),
        ),
        migrations.AlterField(
            model_name='historicalinvoice',
            name='status',
            field=models.CharField(choices=[('draft', 'Draft'), ('issued', 'Issued'), ('partial', 'Partially Paid'), ('paid', 'Paid'), ('overdue', 'Overdue'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded')], db_index=True, default='draft', help_text='Current invoice status', max_length=20),
        ),
        migrations.AlterField(
            model_name='historicalinvoice',
            name='tax',
            field=models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total tax amount (item tax + VAT)', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))]),
        ),
        migrations.AlterField(
            model_name='historicalinvoice',
            name='total',
            field=models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Final amount: (subtotal + service_charge + tax - discount)', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))]),
        ),
        migrations.AlterField(
            model_name='historicalinvoiceitem',
            name='invoice',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='Parent invoice', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pos.invoice'),
        ),
        migrations.AlterField(
            model_name='historicalinvoiceitem',
            name='product_name',
            field=models.CharField(blank=True, help_text='Description shown on invoice', max_length=200),
        ),
        migrations.AlterField(
            model_name='historicalinvoiceitem',
            name='quantity',
            field=models.PositiveIntegerField(default=1, help_text='Number of units', validators=[django.core.validators.MinValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='historicalinvoiceitem',
            name='service',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='Link to service (optional, for reporting)', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='services.service'),
        ),
        migrations.AlterField(
            model_name='historicalinvoiceitem',
            name='tax_rate',
            field=models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Tax percentage (e.g., 8.00 for 8%)', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))]),
        ),
        migrations.AlterField(
            model_name='historicalinvoiceitem',
            name='unit_price',
            field=models.DecimalField(decimal_places=2, help_text='Price per unit (before tax)', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))]),
        ),
        migrations.AlterField(
            model_name='historicalpayment',
            name='amount',
            field=models.DecimalField(decimal_places=2, help_text='Payment amount', max_digits=12, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AlterField(
            model_name='historicalpayment',
            name='gateway_response',
            field=models.JSONField(blank=True, default=dict, help_text='Response from payment gateway'),
        ),
        migrations.AlterField(
            model_name='historicalpayment',
            name='invoice',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='Invoice being paid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pos.invoice'),
        ),
        migrations.AlterField(
            model_name='historicalpayment',
            name='is_refunded',
            field=models.BooleanField(default=False, help_text='Whether this payment has been refunded'),
        ),
        migrations.AlterField(
            model_name='historicalpayment',
            name='method',
            field=models.CharField(choices=[('cash', 'Cash'), ('card', 'Card'), ('wallet', 'Wallet'), ('stripe', 'Stripe'), ('paypal', 'PayPal'), ('gift_card', 'Gift Card'), ('store_credit', 'Store Credit')], help_text='Payment method', max_length=20),
        ),
        migrations.AlterField(
            model_name='historicalpayment',
            name='notes',
            field=models.TextField(blank=True, help_text='Payment notes'),
        ),
        migrations.AlterField(
            model_name='historicalpayment',
            name='payment_date',
            field=models.DateTimeField(blank=True, editable=False, help_text='When payment was received'),
        ),
        migrations.AlterField(
            model_name='historicalpayment',
            name='processing_fee',
            field=models.DecimalField(decimal_places=2, default=0, help_text='Processing/gateway fee', max_digits=10),
        ),
        migrations.AlterField(
            model_name='historicalpayment',
            name='reference',
            field=models.CharField(blank=True, help_text='Additional reference (check #, last 4 digits, etc.)', max_length=100),
        ),
        migrations.AlterField(
            model_name='historicalpayment',
            name='refund_amount',
            field=models.DecimalField(decimal_places=2, default=0, help_text='Amount refunded from this payment', max_digits=10),
        ),
        migrations.AlterField(
            model_name='historicalpayment',
            name='refund_date',
            field=models.DateTimeField(blank=True, help_text='When refund was processed', null=True),
        ),
        migrations.AlterField(
            model_name='historicalpayment',
            name='refund_reason',
            field=models.TextField(blank=True, help_text='Reason for refund'),
        ),
        migrations.AlterField(
            model_name='historicalpayment',
            name='status',
            field=models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded'), ('cancelled', 'Cancelled')], db_index=True, default='completed', help_text='Payment status', max_length=20),
        ),
        migrations.AlterField(
            model_name='historicalpayment',
            name='transaction_id',
            field=models.CharField(blank=True, help_text='Processor transaction ID', max_length=100),
        ),
        migrations.AlterField(
            model_name='historicalposconfig',
            name='service_charge_rate',
            field=models.DecimalField(decimal_places=2, default=0, help_text='Service charge percentage (e.g., 10.00 for 10%)', max_digits=5, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AlterField(
            model_name='historicalposconfig',
            name='vat_rate',
            field=models.DecimalField(decimal_places=2, default=0, help_text='VAT rate percentage (e.g., 15.00 for 15%)', max_digits=5, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AlterField(
            model_name='invoice',
            name='date',
            field=models.DateTimeField(auto_now_add=True, help_text='When invoice was created'),
        ),
        migrations.AlterField(
            model_name='invoice',
            name='discount',
            field=models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Discount amount (promotional, membership, etc.)', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))]),
        ),
        migrations.AlterField(
            model_name='invoice',
            name='guest',
            field=models.ForeignKey(help_text='The guest being billed', on_delete=django.db.models.deletion.CASCADE, related_name='invoices', to='guests.guest'),
        ),
        migrations.AlterField(
            model_name='invoice',
            name='invoice_number',
            field=models.CharField(blank=True, db_index=True, help_text='Auto-generated unique invoice number (e.g., INV-1-20251010)', max_length=50, unique=True),
        ),
        migrations.AlterField(
            model_name='invoice',
            name='notes',
            field=models.TextField(blank=True, help_text='Internal notes (guest requests, special circumstances, etc.)'),
        ),
        migrations.AlterField(
            model_name='invoice',
            name='reservation',
            field=models.ForeignKey(blank=True, help_text='Related reservation (if any)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='invoices', to='reservations.reservation'),
        ),
        migrations.AlterField(
            model_name='invoice',
            name='status',
            field=models.CharField(choices=[('draft', 'Draft'), ('issued', 'Issued'), ('partial', 'Partially Paid'), ('paid', 'Paid'), ('overdue', 'Overdue'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded')], db_index=True, default='draft', help_text='Current invoice status', max_length=20),
        ),
        migrations.AlterField(
            model_name='invoice',
            name='tax',
            field=models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total tax amount (item tax + VAT)', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))]),
        ),
        migrations.AlterField(
            model_name='invoice',
            name='total',
            field=models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Final amount: (subtotal + service_charge + tax - discount)', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))]),
        ),
        migrations.AlterField(
            model_name='invoiceitem',
            name='invoice',
            field=models.ForeignKey(help_text='Parent invoice', on_delete=django.db.models.deletion.CASCADE, related_name='items', to='pos.invoice'),
        ),
        migrations.AlterField(
            model_name='invoiceitem',
            name='product_name',
            field=models.CharField(blank=True, help_text='Description shown on invoice', max_length=200),
        ),
        migrations.AlterField(
            model_name='invoiceitem',
            name='quantity',
            field=models.PositiveIntegerField(default=1, help_text='Number of units', validators=[django.core.validators.MinValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='invoiceitem',
            name='service',
            field=models.ForeignKey(blank=True, help_text='Link to service (optional, for reporting)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='invoice_items', to='services.service'),
        ),
        migrations.AlterField(
            model_name='invoiceitem',
            name='tax_rate',
            field=models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Tax percentage (e.g., 8.00 for 8%)', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))]),
        ),
        migrations.AlterField(
            model_name='invoiceitem',
            name='unit_price',
            field=models.DecimalField(decimal_places=2, help_text='Price per unit (before tax)', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))]),
        ),
        migrations.AlterField(
            model_name='payment',
            name='amount',
            field=models.DecimalField(decimal_places=2, help_text='Payment amount', max_digits=12, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AlterField(
            model_name='payment',
            name='gateway_response',
            field=models.JSONField(blank=True, default=dict, help_text='Response from payment gateway'),
        ),
        migrations.AlterField(
            model_name='payment',
            name='invoice',
            field=models.ForeignKey(help_text='Invoice being paid', on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='pos.invoice'),
        ),
        migrations.AlterField(
            model_name='payment',
            name='is_refunded',
            field=models.BooleanField(default=False, help_text='Whether this payment has been refunded'),
        ),
        migrations.AlterField(
            model_name='payment',
            name='method',
            field=models.CharField(choices=[('cash', 'Cash'), ('card', 'Card'), ('wallet', 'Wallet'), ('stripe', 'Stripe'), ('paypal', 'PayPal'), ('gift_card', 'Gift Card'), ('store_credit', 'Store Credit')], help_text='Payment method', max_length=20),
        ),
        migrations.AlterField(
            model_name='payment',
            name='notes',
            field=models.TextField(blank=True, help_text='Payment notes'),
        ),
        migrations.AlterField(
            model_name='payment',
            name='payment_date',
            field=models.DateTimeField(auto_now_add=True, help_text='When payment was received'),
        ),
        migrations.AlterField(
            model_name='payment',
            name='processing_fee',
            field=models.DecimalField(decimal_places=2, default=0, help_text='Processing/gateway fee', max_digits=10),
        ),
        migrations.AlterField(
            model_name='payment',
            name='reference',
            field=models.CharField(blank=True, help_text='Additional reference (check #, last 4 digits, etc.)', max_length=100),
        ),
        migrations.AlterField(
            model_name='payment',
            name='refund_amount',
            field=models.DecimalField(decimal_places=2, default=0, help_text='Amount refunded from this payment', max_digits=10),
        ),
        migrations.AlterField(
            model_name='payment',
            name='refund_date',
            field=models.DateTimeField(blank=True, help_text='When refund was processed', null=True),
        ),
        migrations.AlterField(
            model_name='payment',
            name='refund_reason',
            field=models.TextField(blank=True, help_text='Reason for refund'),
        ),
        migrations.AlterField(
            model_name='payment',
            name='status',
            field=models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded'), ('cancelled', 'Cancelled')], db_index=True, default='completed', help_text='Payment status', max_length=20),
        ),
        migrations.AlterField(
            model_name='payment',
            name='transaction_id',
            field=models.CharField(blank=True, help_text='Processor transaction ID', max_length=100),
        ),
        migrations.AlterField(
            model_name='posconfig',
            name='service_charge_rate',
            field=models.DecimalField(decimal_places=2, default=0, help_text='Service charge percentage (e.g., 10.00 for 10%)', max_digits=5, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AlterField(
            model_name='posconfig',
            name='vat_rate',
            field=models.DecimalField(decimal_places=2, default=0, help_text='VAT rate percentage (e.g., 15.00 for 15%)', max_digits=5, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AlterField(
            model_name='refund',
            name='amount',
            field=models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['-date'], name='pos_invoice_date_fda29b_idx'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['guest', '-date'], name='pos_invoice_guest_i_47aaca_idx'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['status'], name='pos_invoice_status_6a02e0_idx'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['invoice_number'], name='pos_invoice_invoice_1f90a9_idx'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['reservation'], name='pos_invoice_reserva_cd17ce_idx'),
        ),
        migrations.AddField(
            model_name='historicalfinancialreport',
            name='generated_by',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalfinancialreport',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalgiftcard',
            name='guest',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='guests.guest'),
        ),
        migrations.AddField(
            model_name='historicalgiftcard',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalgiftcard',
            name='issued_by',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalpaymentmethod',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalpromotionalcode',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalrefund',
            name='approved_by',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalrefund',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalrefund',
            name='invoice',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pos.invoice'),
        ),
        migrations.AddField(
            model_name='historicalrefund',
            name='payment',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pos.payment'),
        ),
        migrations.AddField(
            model_name='historicalrefund',
            name='requested_by',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='paymentmethod',
            index=models.Index(fields=['code'], name='pos_payment_code_e16ab3_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentmethod',
            index=models.Index(fields=['is_active'], name='pos_payment_is_acti_90fb3e_idx'),
        ),
        migrations.AddField(
            model_name='historicalpayment',
            name='payment_method',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='Link to payment method record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pos.paymentmethod'),
        ),
        migrations.AddField(
            model_name='payment',
            name='payment_method',
            field=models.ForeignKey(blank=True, help_text='Link to payment method record', null=True, on_delete=django.db.models.deletion.PROTECT, to='pos.paymentmethod'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['-payment_date'], name='pos_payment_payment_332bdd_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['invoice', '-payment_date'], name='pos_payment_invoice_d2b6c3_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['status'], name='pos_payment_status_19c24f_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['method'], name='pos_payment_method_e85c8d_idx'),
        ),
    ]
