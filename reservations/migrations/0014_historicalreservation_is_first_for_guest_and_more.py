# Generated by Django 5.2.6 on 2025-10-06 10:08

from django.db import migrations, models


def backfill_is_first_for_guest(apps, schema_editor):
    Reservation = apps.get_model('reservations', 'Reservation')
    from django.db.models import OuterRef, Subquery
    first_res_subq = Subquery(
        Reservation.objects.filter(guest_id=OuterRef('guest_id')).order_by('start_time').values('id')[:1]
    )
    qs = Reservation.objects.all().annotate(first_id=first_res_subq)
    batch = []
    for r in qs.iterator():
        val = bool(getattr(r, 'first_id', None) == getattr(r, 'id', None))
        if getattr(r, 'is_first_for_guest', None) != val:
            r.is_first_for_guest = val
            batch.append(r)
            if len(batch) >= 500:
                Reservation.objects.bulk_update(batch, ['is_first_for_guest'])
                batch.clear()
    if batch:
        Reservation.objects.bulk_update(batch, ['is_first_for_guest'])


class Migration(migrations.Migration):

    dependencies = [
        ('reservations', '0013_historicalreservation_cancellation_reason_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='historicalreservation',
            name='is_first_for_guest',
            field=models.BooleanField(db_index=True, default=False),
        ),
        migrations.AddField(
            model_name='reservation',
            name='is_first_for_guest',
            field=models.BooleanField(db_index=True, default=False),
        ),
        migrations.RunPython(code=backfill_is_first_for_guest, reverse_code=migrations.RunPython.noop),
    ]


def backfill_is_first_for_guest(apps, schema_editor):
    Reservation = apps.get_model('reservations', 'Reservation')
    from django.db.models import OuterRef, Subquery
    first_res_subq = Subquery(
        Reservation.objects.filter(guest_id=OuterRef('guest_id')).order_by('start_time').values('id')[:1]
    )
    qs = Reservation.objects.all().annotate(first_id=first_res_subq)
    batch = []
    for r in qs.iterator():
        val = bool(getattr(r, 'first_id', None) == getattr(r, 'id', None))
        if getattr(r, 'is_first_for_guest', None) != val:
            r.is_first_for_guest = val
            batch.append(r)
            if len(batch) >= 500:
                Reservation.objects.bulk_update(batch, ['is_first_for_guest'])
                batch.clear()
    if batch:
        Reservation.objects.bulk_update(batch, ['is_first_for_guest'])
