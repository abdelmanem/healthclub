# Generated by Django 5.2.6 on 2025-09-15 20:06

from django.db import migrations


def fix_membership_tiers(apps, schema_editor):
    """Create missing membership tiers and map existing guest data"""
    Guest = apps.get_model('guests', 'Guest')
    MembershipTier = apps.get_model('config', 'MembershipTier')
    
    # Create default tiers if they don't exist
    default_tiers = [
        {'name': 'bronze', 'display_name': 'Bronze', 'discount_percentage': 0, 'sort_order': 1},
        {'name': 'silver', 'display_name': 'Silver', 'discount_percentage': 5, 'sort_order': 2},
        {'name': 'gold', 'display_name': 'Gold', 'discount_percentage': 10, 'sort_order': 3},
        {'name': 'platinum', 'display_name': 'Platinum', 'discount_percentage': 15, 'sort_order': 4},
        {'name': 'vip', 'display_name': 'VIP', 'discount_percentage': 20, 'sort_order': 5},
    ]
    
    for tier_data in default_tiers:
        MembershipTier.objects.get_or_create(
            name=tier_data['name'],
            defaults=tier_data
        )
    
    # Map existing guest membership_tier values to proper names
    mapping = {
        'Bronze': 'bronze',
        'Silver': 'silver', 
        'Gold': 'gold',
        'Platinum': 'platinum',
        'VIP': 'vip',
        'bronze': 'bronze',
        'silver': 'silver',
        'gold': 'gold',
        'platinum': 'platinum',
        'vip': 'vip',
    }
    
    # Update guests with mapped values
    for guest in Guest.objects.all():
        if guest.membership_tier in mapping:
            guest.membership_tier = mapping[guest.membership_tier]
            guest.save(update_fields=['membership_tier'])


def reverse_fix_membership_tiers(apps, schema_editor):
    """Reverse migration - set membership_tier to null"""
    Guest = apps.get_model('guests', 'Guest')
    Guest.objects.update(membership_tier=None)


class Migration(migrations.Migration):

    dependencies = [
        ('guests', '0006_alter_guest_membership_tier_and_more'),
        ('config', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(fix_membership_tiers, reverse_fix_membership_tiers),
    ]
