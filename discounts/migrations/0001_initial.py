# Generated by Django 5.2.6 on 2025-10-26 09:39

import django.core.validators
import django.db.models.deletion
import simple_history.models
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("config", "0003_seed_cancellation_reasons"),
        ("reservations", "0015_add_deposit_fields"),
        ("services", "0006_auto_20250913_0032"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="DiscountType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Display name for the discount type", max_length=100
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Unique code for the discount type (e.g., 'FIRST_TIME', 'EMP_10')",
                        max_length=20,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Detailed description of the discount"
                    ),
                ),
                (
                    "discount_method",
                    models.CharField(
                        choices=[
                            ("percentage", "Percentage"),
                            ("fixed_amount", "Fixed Amount"),
                            ("free_service", "Free Service"),
                        ],
                        help_text="How the discount is calculated",
                        max_length=20,
                    ),
                ),
                (
                    "discount_value",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Discount value (percentage or fixed amount)",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "max_discount_amount",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Maximum discount amount (for percentage discounts)",
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "min_order_amount",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Minimum order amount required for this discount",
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this discount type is currently available",
                    ),
                ),
                (
                    "requires_approval",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this discount requires manager approval",
                    ),
                ),
                (
                    "usage_limit_per_guest",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum times a guest can use this discount (null = unlimited)",
                        null=True,
                    ),
                ),
                (
                    "usage_limit_per_day",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum times this discount can be used per day (null = unlimited)",
                        null=True,
                    ),
                ),
                (
                    "valid_from",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this discount becomes valid",
                        null=True,
                    ),
                ),
                (
                    "valid_until",
                    models.DateTimeField(
                        blank=True, help_text="When this discount expires", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "applicable_membership_tiers",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Membership tiers this discount applies to (empty = all tiers)",
                        to="config.membershiptier",
                    ),
                ),
                (
                    "applicable_services",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Services this discount applies to (empty = all services)",
                        to="services.service",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_discount_types",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Discount Type",
                "verbose_name_plural": "Discount Types",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="DiscountRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the discount rule", max_length=100
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of when this rule applies"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this rule is currently active"
                    ),
                ),
                (
                    "priority",
                    models.IntegerField(
                        default=0, help_text="Higher priority rules are applied first"
                    ),
                ),
                (
                    "conditions",
                    models.JSONField(
                        default=dict, help_text="Rule conditions in JSON format"
                    ),
                ),
                (
                    "valid_from",
                    models.DateTimeField(
                        blank=True, help_text="When this rule becomes valid", null=True
                    ),
                ),
                (
                    "valid_until",
                    models.DateTimeField(
                        blank=True, help_text="When this rule expires", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_discount_rules",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "discount_type",
                    models.ForeignKey(
                        help_text="Discount type to apply when conditions are met",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rules",
                        to="discounts.discounttype",
                    ),
                ),
            ],
            options={
                "verbose_name": "Discount Rule",
                "verbose_name_plural": "Discount Rules",
                "ordering": ["-priority", "name"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalDiscountRule",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the discount rule", max_length=100
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of when this rule applies"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this rule is currently active"
                    ),
                ),
                (
                    "priority",
                    models.IntegerField(
                        default=0, help_text="Higher priority rules are applied first"
                    ),
                ),
                (
                    "conditions",
                    models.JSONField(
                        default=dict, help_text="Rule conditions in JSON format"
                    ),
                ),
                (
                    "valid_from",
                    models.DateTimeField(
                        blank=True, help_text="When this rule becomes valid", null=True
                    ),
                ),
                (
                    "valid_until",
                    models.DateTimeField(
                        blank=True, help_text="When this rule expires", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "discount_type",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Discount type to apply when conditions are met",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="discounts.discounttype",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Discount Rule",
                "verbose_name_plural": "historical Discount Rules",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalDiscountType",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Display name for the discount type", max_length=100
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        db_index=True,
                        help_text="Unique code for the discount type (e.g., 'FIRST_TIME', 'EMP_10')",
                        max_length=20,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Detailed description of the discount"
                    ),
                ),
                (
                    "discount_method",
                    models.CharField(
                        choices=[
                            ("percentage", "Percentage"),
                            ("fixed_amount", "Fixed Amount"),
                            ("free_service", "Free Service"),
                        ],
                        help_text="How the discount is calculated",
                        max_length=20,
                    ),
                ),
                (
                    "discount_value",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Discount value (percentage or fixed amount)",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "max_discount_amount",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Maximum discount amount (for percentage discounts)",
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "min_order_amount",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Minimum order amount required for this discount",
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this discount type is currently available",
                    ),
                ),
                (
                    "requires_approval",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this discount requires manager approval",
                    ),
                ),
                (
                    "usage_limit_per_guest",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum times a guest can use this discount (null = unlimited)",
                        null=True,
                    ),
                ),
                (
                    "usage_limit_per_day",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum times this discount can be used per day (null = unlimited)",
                        null=True,
                    ),
                ),
                (
                    "valid_from",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this discount becomes valid",
                        null=True,
                    ),
                ),
                (
                    "valid_until",
                    models.DateTimeField(
                        blank=True, help_text="When this discount expires", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Discount Type",
                "verbose_name_plural": "historical Discount Types",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalReservationDiscount",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "original_amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Original reservation amount before discount",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "discount_amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Amount of discount applied",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "final_amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Final amount after discount",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Approval"),
                            ("approved", "Approved"),
                            ("applied", "Applied"),
                            ("rejected", "Rejected"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="applied",
                        help_text="Current status of the discount",
                        max_length=20,
                    ),
                ),
                (
                    "reason",
                    models.TextField(
                        blank=True, help_text="Reason for applying this discount"
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Additional notes about this discount"
                    ),
                ),
                (
                    "rejection_reason",
                    models.TextField(
                        blank=True, help_text="Reason for rejection (if applicable)"
                    ),
                ),
                ("applied_at", models.DateTimeField(blank=True, editable=False)),
                ("approved_at", models.DateTimeField(blank=True, null=True)),
                ("rejected_at", models.DateTimeField(blank=True, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "applied_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="User who applied this discount",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="User who approved this discount (if required)",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "discount_type",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Type of discount applied",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="discounts.discounttype",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "reservation",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Reservation this discount is applied to",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="reservations.reservation",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Reservation Discount",
                "verbose_name_plural": "historical Reservation Discounts",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="ReservationDiscount",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "original_amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Original reservation amount before discount",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "discount_amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Amount of discount applied",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "final_amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Final amount after discount",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Approval"),
                            ("approved", "Approved"),
                            ("applied", "Applied"),
                            ("rejected", "Rejected"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="applied",
                        help_text="Current status of the discount",
                        max_length=20,
                    ),
                ),
                (
                    "reason",
                    models.TextField(
                        blank=True, help_text="Reason for applying this discount"
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Additional notes about this discount"
                    ),
                ),
                (
                    "rejection_reason",
                    models.TextField(
                        blank=True, help_text="Reason for rejection (if applicable)"
                    ),
                ),
                ("applied_at", models.DateTimeField(auto_now_add=True)),
                ("approved_at", models.DateTimeField(blank=True, null=True)),
                ("rejected_at", models.DateTimeField(blank=True, null=True)),
                (
                    "applied_by",
                    models.ForeignKey(
                        help_text="User who applied this discount",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="applied_discounts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who approved this discount (if required)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_discounts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "discount_type",
                    models.ForeignKey(
                        help_text="Type of discount applied",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="reservation_discounts",
                        to="discounts.discounttype",
                    ),
                ),
                (
                    "reservation",
                    models.ForeignKey(
                        help_text="Reservation this discount is applied to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="discounts",
                        to="reservations.reservation",
                    ),
                ),
            ],
            options={
                "verbose_name": "Reservation Discount",
                "verbose_name_plural": "Reservation Discounts",
                "ordering": ["-applied_at"],
                "unique_together": {("reservation", "discount_type")},
            },
        ),
    ]
